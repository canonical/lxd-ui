[
  {
    "key": "acme.ca_url",
    "type": "string",
    "scope": "global",
    "default": "https://acme-v02.api.letsencrypt.org/directory",
    "description": "URL to the directory resource of the ACME service"
  },
  {
    "key": "acme.domain",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Domain for which the certificate is issued"
  },
  {
    "key": "acme.email",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Email address used for the account registration"
  },
  {
    "key": "acme.agree_tos",
    "type": "bool",
    "scope": "global",
    "default": false,
    "description": "Agree to ACME Terms of service"
  },
  {
    "key": "backups.compression_algorithm",
    "type": "string",
    "scope": "global",
    "default": "gzip",
    "description": "Compression algorithm to use for new images (bzip2, gzip, lzma, xz or none)"
  },
  {
    "key": "candid.api.key",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Public key of the candid server (required for HTTP-only servers)"
  },
  {
    "key": "candid.api.url",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "URL of the the external authentication endpoint using Candid"
  },
  {
    "key": "candid.domains",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Comma-separated list of allowed Candid domains (empty string means all domains are valid)"
  },
  {
    "key": "candid.expiry",
    "type": "integer",
    "scope": "global",
    "default": 3600,
    "description": "Candid macaroon expiry in seconds"
  },
  {
    "key": "cluster.https_address",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Address to use for clustering traffic"
  },
  {
    "key": "cluster.images_minimal_replica",
    "type": "integer",
    "scope": "global",
    "default": 3,
    "description": "Minimal numbers of cluster members with a copy of a particular image (set 1 for no replication, -1 for all members)"
  },
  {
    "key": "cluster.join_token_expiry",
    "type": "string",
    "scope": "global",
    "default": "3H",
    "description": "Time after which a cluster join token expires"
  },
  {
    "key": "cluster.max_standby",
    "type": "integer",
    "scope": "global",
    "default": 2,
    "description": "Maximum number of cluster members that will be assigned the database stand-by role (must be between 0 and 5)"
  },
  {
    "key": "cluster.max_voters",
    "type": "integer",
    "scope": "global",
    "default": 3,
    "description": "Maximum number of cluster members that will be assigned the database voter role (must be an odd number >= 3)"
  },
  {
    "key": "cluster.offline_threshold",
    "type": "integer",
    "scope": "global",
    "default": 20,
    "description": "Number of seconds after which an unresponsive member is considered offline"
  },
  {
    "key": "core.bgp_address",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Address to bind the BGP server to (BGP)"
  },
  {
    "key": "core.bgp_asn",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The BGP Autonomous System Number to use for the local server"
  },
  {
    "key": "core.bgp_routerid",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "A unique identifier for this BGP server (formatted as an IPv4 address)"
  },
  {
    "key": "core.debug_address",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Address to bind the pprof debug server to (HTTP)"
  },
  {
    "key": "core.dns_address",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Address to bind the authoritative DNS server to (DNS)"
  },
  {
    "key": "core.https_address",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Address to bind for the remote API (HTTPS)"
  },
  {
    "key": "core.https_allowed_credentials",
    "type": "bool",
    "scope": "global",
    "default": "",
    "description": "Whether to set Access-Control-Allow-Credentials HTTP header value to true"
  },
  {
    "key": "core.https_allowed_headers",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Access-Control-Allow-Headers HTTP header value"
  },
  {
    "key": "core.https_allowed_methods",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Access-Control-Allow-Methods HTTP header value"
  },
  {
    "key": "core.https_allowed_origin",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Access-Control-Allow-Origin HTTP header value"
  },
  {
    "key": "core.https_trusted_proxy",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Comma-separated list of IP addresses of trusted servers to provide the client’s address through the proxy connection header"
  },
  {
    "key": "core.metrics_address",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Address to bind the metrics server to (HTTPS)"
  },
  {
    "key": "core.metrics_authentication",
    "type": "bool",
    "scope": "global",
    "default": true,
    "description": "Whether to enforce authentication on the metrics endpoint"
  },
  {
    "key": "core.proxy_https",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "HTTPS proxy to use, if any (falls back to HTTPS_PROXY environment variable)"
  },
  {
    "key": "core.proxy_http",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "HTTP proxy to use, if any (falls back to HTTP_PROXY environment variable)"
  },
  {
    "key": "core.proxy_ignore_hosts",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Hosts which don’t need the proxy for use (similar format to NO_PROXY, e.g. 1.2.3.4,1.2.3.5, falls back to NO_PROXY environment variable)"
  },
  {
    "key": "core.remote_token_expiry",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Time after which a remote add token expires (defaults to no expiry)"
  },
  {
    "key": "core.shutdown_timeout",
    "type": "integer",
    "scope": "global",
    "default": 5,
    "description": "Number of minutes to wait for running operations to complete before LXD server shut down"
  },
  {
    "key": "core.storage_buckets_address",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Address to bind the storage object server to (HTTPS)"
  },
  {
    "key": "core.trust_ca_certificates",
    "type": "bool",
    "scope": "global",
    "default": "",
    "description": "Whether to automatically trust clients signed by the CA"
  },
  {
    "key": "core.trust_password",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Password to be provided by clients to set up a trust"
  },
  {
    "key": "images.auto_update_cached",
    "type": "bool",
    "scope": "global",
    "default": true,
    "description": "Whether to automatically update any image that LXD caches"
  },
  {
    "key": "images.auto_update_interval",
    "type": "integer",
    "scope": "global",
    "default": 6,
    "description": "Interval in hours at which to look for update to cached images (0 disables it)"
  },
  {
    "key": "images.compression_algorithm",
    "type": "string",
    "scope": "global",
    "default": "gzip",
    "description": "Compression algorithm to use for new images (bzip2, gzip, lzma, xz or none)"
  },
  {
    "key": "images.default_architecture",
    "type": "string",
    "scope": "-",
    "default": "",
    "description": "Default architecture which should be used in mixed architecture cluster"
  },
  {
    "key": "images.remote_cache_expiry",
    "type": "integer",
    "scope": "global",
    "default": 10,
    "description": "Number of days after which an unused cached remote image will be flushed"
  },
  {
    "key": "instances.nic.host_name",
    "type": "string",
    "scope": "global",
    "default": "random",
    "description": "If it is set to random then use the random host interface names but if it’s set to mac, then generate a name in the form lxd<mac_address>(MAC without leading 2 digits)."
  },
  {
    "key": "loki.api.ca_cert",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The CA certificate for the Loki server"
  },
  {
    "key": "loki.api.url",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The URL to the Loki server"
  },
  {
    "key": "loki.auth.password",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The password used for authentication"
  },
  {
    "key": "loki.auth.username",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The username used for authentication"
  },
  {
    "key": "loki.labels",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Comma-separated list of values which should be used as labels for a Loki log entry"
  },
  {
    "key": "loki.loglevel",
    "type": "string",
    "scope": "global",
    "default": "info",
    "description": "Minimum log level to send to Loki server"
  },
  {
    "key": "loki.types",
    "type": "string",
    "scope": "global",
    "default": "lifecycle,logging",
    "description": "Comma-separated list of events to send to Loki server (lifecycle and/or logging)"
  },
  {
    "key": "maas.api.key",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "API key to manage MAAS"
  },
  {
    "key": "maas.api.url",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "URL of the MAAS server"
  },
  {
    "key": "maas.machine",
    "type": "string",
    "scope": "local",
    "default": "host name",
    "description": "Name of this LXD host in MAAS"
  },
  {
    "key": "network.ovn.integration_bridge",
    "type": "string",
    "scope": "global",
    "default": "br-int",
    "description": "OVS integration bridge to use for OVN networks"
  },
  {
    "key": "network.ovn.northbound_connection",
    "type": "string",
    "scope": "global",
    "default": "unix:/var/run/ovn/ovnnb_db.sock",
    "description": "OVN northbound database connection string"
  },
  {
    "key": "oidc.client.id",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "OpenID Connect client ID"
  },
  {
    "key": "oidc.issuer",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "OpenID Connect Discovery URL for the provider"
  },
  {
    "key": "oidc.audience",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Expected audience value for the application (required by some providers)"
  },
  {
    "key": "rbac.agent.private_key",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The Candid agent private key as provided during RBAC registration"
  },
  {
    "key": "rbac.agent.public_key",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The Candid agent public key as provided during RBAC registration"
  },
  {
    "key": "rbac.agent.url",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The Candid agent URL as provided during RBAC registration"
  },
  {
    "key": "rbac.agent.username",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "The Candid agent username as provided during RBAC registration"
  },
  {
    "key": "rbac.api.expiry",
    "type": "integer",
    "scope": "global",
    "default": "",
    "description": "RBAC macaroon expiry in seconds"
  },
  {
    "key": "rbac.api.key",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "Public key of the RBAC server (required for HTTP-only servers)"
  },
  {
    "key": "rbac.api.url",
    "type": "string",
    "scope": "global",
    "default": "",
    "description": "URL of the external RBAC server"
  },
  {
    "key": "storage.backups_volume",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Volume to use to store the backup tarballs (syntax is POOL/VOLUME)"
  },
  {
    "key": "storage.images_volume",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Volume to use to store the image tarballs (syntax is POOL/VOLUME)"
  },
  {
    "key": "user.ui_title",
    "type": "string",
    "scope": "local",
    "default": "",
    "description": "Custom identifier for the title of the UI when used on this server"
  }
]