/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.7
 */
export type GetEntitlements200Item = {
  entitlement?: Entitlement;
  entity?: Entity;
};

export type GetAuthenticationProviders200Item = {
  tobedefined?: string;
};

/**
 * A string to filter results by
 */
export type FilterParamParameter = string;

/**
 * The record offset to return results from
 */
export type PaginationOffsetParameter = number;

/**
 * The number of records to return per response
 */
export type PaginationLimitParameter = number;

export type GetResourcesParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetRolesIdEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetRolesParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetGroupsIdUsersParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetGroupsParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetUsersIdEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetUsersIdRolesParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetUsersIdGroupsParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetUsersParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetAuthenticationParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type GetAuthenticationProvidersParams = {
  /**
   * The number of records to return per response
   */
  limit?: PaginationLimitParameter;
  /**
   * The record offset to return results from
   */
  offset?: PaginationOffsetParameter;
};

export type ErrorErrorCode =
  (typeof ErrorErrorCode)[keyof typeof ErrorErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorErrorCode = {
  BAD_REQUEST: "BAD_REQUEST",
  UNAUTHORIZED: "UNAUTHORIZED",
  NOT_FOUND: "NOT_FOUND",
  UNEXPECTED_ERROR: "UNEXPECTED_ERROR",
} as const;

export interface Error {
  error_code?: ErrorErrorCode;
  error_message?: string;
  status_code?: number;
}

/**
 * Unexpected error
 */
export type DefaultResponse = Error;

/**
 * Not found
 */
export type NotFoundResponse = Error;

/**
 * Unauthorized
 */
export type UnauthorizedResponse = Error;

/**
 * Bad Request
 */
export type BadRequestResponse = Error;

export type Entitlement = string;

export type Entity = string;

export interface Resource {
  entity: Entity;
  id: string;
  name: string;
  parent: Resource;
}

export type RoleEntitlementsItem = {
  entitlement?: string;
  entity?: Entity;
  resource?: string;
};

export interface Role {
  entitlements?: RoleEntitlementsItem[];
  id?: string;
  name: string;
}

export interface Group {
  id?: string;
  name: string;
}

export interface User {
  addedBy: string;
  certificate?: string;
  email: string;
  firstName?: string;
  groups?: number;
  id?: string;
  joined?: string;
  lastLogin?: string;
  lastName?: string;
  permissions?: number;
  roles?: number;
  source: string;
}

export type IdentityProviderSyncMode =
  (typeof IdentityProviderSyncMode)[keyof typeof IdentityProviderSyncMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityProviderSyncMode = {
  import: "import",
} as const;

export interface IdentityProvider {
  acceptsPromptNone?: boolean;
  accountLinkingOnly?: boolean;
  clientID?: string;
  clientSecret?: string;
  disableUserInfo?: boolean;
  enabled?: boolean;
  id?: string;
  name?: string;
  redirectUrl?: string;
  storeTokens?: boolean;
  storeTokensReadable?: boolean;
  syncMode?: IdentityProviderSyncMode;
  trustEmail?: boolean;
  userCount?: number;
}
