/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.7
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  BadRequestResponse,
  DefaultResponse,
  GetGroupsIdUsersParams,
  Group,
  NotFoundResponse,
  UnauthorizedResponse,
  User,
} from "../api.schemas";

/**
 * @summary Get a single user.
 */
export const getGroupsId = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Group>> => {
  return axios.get(`/groups/${id}`, options);
};

export const getGetGroupsIdQueryKey = (id: string) => {
  return [`/groups/${id}`] as const;
};

export const getGetGroupsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsId>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsId>>> = ({
    signal,
  }) => getGroupsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsId>>
>;
export type GetGroupsIdQueryError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single user.
 */
export const useGetGroupsId = <
  TData = Awaited<ReturnType<typeof getGroupsId>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update a group.
 */
export const patchGroupsId = (
  id: string,
  group: Group,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(`/groups/${id}`, group, options);
};

export const getPatchGroupsIdMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsId>>,
    TError,
    { id: string; data: Group },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsId>>,
  TError,
  { id: string; data: Group },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsId>>,
    { id: string; data: Group }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsId>>
>;
export type PatchGroupsIdMutationBody = Group;
export type PatchGroupsIdMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update a group.
 */
export const usePatchGroupsId = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsId>>,
    TError,
    { id: string; data: Group },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPatchGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove a group.
 */
export const deleteGroupsId = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/groups/${id}`, options);
};

export const getDeleteGroupsIdMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsId>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteGroupsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsId>>
>;

export type DeleteGroupsIdMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove a group.
 */
export const useDeleteGroupsId = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsId>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get the users of a group
 */
export const getGroupsIdUsers = (
  id: string,
  params?: GetGroupsIdUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
  return axios.get(`/groups/${id}/users`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetGroupsIdUsersQueryKey = (
  id: string,
  params?: GetGroupsIdUsersParams,
) => {
  return [`/groups/${id}/users`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsIdUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsIdUsers>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdUsers>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsIdUsersQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsIdUsers>>
  > = ({ signal }) => getGroupsIdUsers(id, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsIdUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsIdUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsIdUsers>>
>;
export type GetGroupsIdUsersQueryError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the users of a group
 */
export const useGetGroupsIdUsers = <
  TData = Awaited<ReturnType<typeof getGroupsIdUsers>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdUsers>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsIdUsersQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update the list of a groups users.
 */
export const patchGroupsIdUsers = (
  id: string,
  user: User,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(`/groups/${id}/users`, user, options);
};

export const getPatchGroupsIdUsersMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsIdUsers>>,
    TError,
    { id: string; data: User },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsIdUsers>>,
  TError,
  { id: string; data: User },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsIdUsers>>,
    { id: string; data: User }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsIdUsers(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsIdUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsIdUsers>>
>;
export type PatchGroupsIdUsersMutationBody = User;
export type PatchGroupsIdUsersMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update the list of a groups users.
 */
export const usePatchGroupsIdUsers = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsIdUsers>>,
    TError,
    { id: string; data: User },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPatchGroupsIdUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove a user from a group
 */
export const deleteGroupsIdUsersUserId = (
  id: string,
  userId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/groups/${id}/users/${userId}`, options);
};

export const getDeleteGroupsIdUsersUserIdMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdUsersUserId>>,
    TError,
    { id: string; userId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsIdUsersUserId>>,
  TError,
  { id: string; userId: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsIdUsersUserId>>,
    { id: string; userId: string }
  > = (props) => {
    const { id, userId } = props ?? {};

    return deleteGroupsIdUsersUserId(id, userId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsIdUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsIdUsersUserId>>
>;

export type DeleteGroupsIdUsersUserIdMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove a user from a group
 */
export const useDeleteGroupsIdUsersUserId = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdUsersUserId>>,
    TError,
    { id: string; userId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteGroupsIdUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};
